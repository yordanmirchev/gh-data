name: Deploy website
on:
  push:
    branches:
      - master
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm   # we tell that this path needs to be stored and shared
          key: deps-node-modulles-${{ hashFiles('**/package-lock.json') }}  # the id needs to have dynamic part so if the cached content changes we'll know to referesh it. Here we use the hash of a file(s) , ** will match all files.
      - name: Install dependencies # once we have the file cached if the cache had not been changed we'll reuse the ~/.npm folder
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      script-file:  ${{ steps.publish.outputs.script-file }}
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm   # we tell that this path needs to be stored and shared
          key: deps-node-modulles-${{ hashFiles('**/package-lock.json') }}  # the id needs to have dynamic part so if the cached content changes we'll know to referesh it. Here we use the hash of a file(s) , ** will match all files
      - name: Install dependencies # once we have the file cached if the cache had not been changed we'll reuse the ~/.npm folder
        run: npm ci
      - name: Build website
        run: npm run build
      - name: Publish JS filename
        id: publish
        run: find dist/assets/*.js -type f -execdir echo 'script-file={}'>> $GITHUB_OUTPUT ';'
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist_files
          path: dist
          # path:  |
          #   dist
          #   package.json
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist_files  # same as the name for upload artifact
      - name : Output contents
        run: ls
      - name: Output filename
        run: echo "${{ needs.build.outputs.script-file }}"
      - name: Deploy
        run: echo "Deploying..."
